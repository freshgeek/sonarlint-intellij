/*
 * SonarLint for IntelliJ IDEA
 * Copyright (C) 2015-2020 SonarSource
 * sonarlint@sonarsource.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */
package org.sonarlint.intellij.issue.vulnerabilities

import org.sonarlint.intellij.issue.IssueMatcher
import com.intellij.openapi.vfs.VirtualFile
import com.intellij.openapi.roots.ProjectRootManager
import com.intellij.openapi.project.Project
import org.sonarlint.intellij.issue.IssueMatcher.NoMatchException
import org.sonarsource.sonarlint.core.client.api.common.TextRange
import org.sonarsource.sonarlint.core.client.api.connected.ServerIssue

class TaintVulnerabilityMatcher(private val project: Project) {
  private val issueMatcher = IssueMatcher(project)

  fun match(remoteIssue: ServerIssue): LocalTaintVulnerability {
    return LocalTaintVulnerability(matchLocation(remoteIssue), remoteIssue)
  }

  private fun matchLocation(remoteIssue: ServerIssue): Location {
    for (contentRoot in ProjectRootManager.getInstance(project)
      .contentRoots) {
      val matchedFile = contentRoot.findFileByRelativePath(remoteIssue.filePath())
      if (matchedFile != null) {
        // XXX we just have the line for the moment, see SLCORE-291
        return matchTextRange(matchedFile, TextRange(remoteIssue.line(), null, remoteIssue.line(), null))
      }
    }
    return unknownLocation()
  }

  private fun matchTextRange(matchedFile: VirtualFile, textRange: TextRange): Location {
    return try {
      val rangeMarker = issueMatcher.match(matchedFile, textRange)
      resolvedLocation(matchedFile, rangeMarker)
    } catch (e: NoMatchException) {
      fileOnlyLocation(matchedFile)
    }
  }
}