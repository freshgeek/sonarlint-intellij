/*
 * SonarLint for IntelliJ IDEA
 * Copyright (C) 2015-2020 SonarSource
 * sonarlint@sonarsource.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */
package org.sonarlint.intellij.issue.vulnerabilities

import com.intellij.openapi.editor.RangeMarker
import com.intellij.openapi.vfs.VirtualFile
import org.sonarsource.sonarlint.core.client.api.connected.ServerIssue
import java.time.Instant

class LocalTaintVulnerability(private val primaryLocation: Location, private val remoteTaintVulnerability: ServerIssue) {
  fun rangeMarker() = primaryLocation.range
  fun file() = primaryLocation.file
  fun message(): String = remoteTaintVulnerability.message()
  fun resolution(): String = remoteTaintVulnerability.resolution()
  fun creationDate(): Instant = remoteTaintVulnerability.creationDate()
  fun severity(): String = remoteTaintVulnerability.severity()
  fun ruleKey(): String = remoteTaintVulnerability.ruleKey()
  fun type() = remoteTaintVulnerability.type()
  fun isValid() = file()?.isValid == true && rangeMarker()?.isValid == true
}

fun unknownLocation(): Location {
  return Location(null, null)
}

fun fileOnlyLocation(file: VirtualFile?): Location {
  return Location(file, null)
}

fun resolvedLocation(file: VirtualFile?, range: RangeMarker?): Location {
  return Location(file, range)
}

data class Location (val file: VirtualFile?, val range: RangeMarker?) {
  val isResolved = file != null && file.isValid && range != null && range.isValid
}
